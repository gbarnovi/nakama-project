// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// RuntimeLogger is an autogenerated mock type for the RuntimeLogger type
type RuntimeLogger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: format, v
func (_m *RuntimeLogger) Debug(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: format, v
func (_m *RuntimeLogger) Error(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Fields provides a mock function with given fields:
func (_m *RuntimeLogger) Fields() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Info provides a mock function with given fields: format, v
func (_m *RuntimeLogger) Info(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: format, v
func (_m *RuntimeLogger) Warn(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// WithField provides a mock function with given fields: key, v
func (_m *RuntimeLogger) WithField(key string, v interface{}) runtime.Logger {
	ret := _m.Called(key, v)

	var r0 runtime.Logger
	if rf, ok := ret.Get(0).(func(string, interface{}) runtime.Logger); ok {
		r0 = rf(key, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Logger)
		}
	}

	return r0
}

// WithFields provides a mock function with given fields: fields
func (_m *RuntimeLogger) WithFields(fields map[string]interface{}) runtime.Logger {
	ret := _m.Called(fields)

	var r0 runtime.Logger
	if rf, ok := ret.Get(0).(func(map[string]interface{}) runtime.Logger); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Logger)
		}
	}

	return r0
}

// NewRuntimeLogger creates a new instance of RuntimeLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuntimeLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *RuntimeLogger {
	mock := &RuntimeLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
